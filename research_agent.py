from datetime import datetime
from pathlib import Path
from textwrap import dedent

import google.generativeai as genai

from agno.agent import Agent
from agno.tools.exa import ExaTools

today = datetime.now().strftime("%Y-%m-%d")

genai.configure(api_key="AIzaSyCARQ2mkQV3dd-TzWo79Q5wkloah1Aqiac")

def gemini_chat(prompt):
    # Use the latest supported Gemini model name
    model = genai.GenerativeModel('models/gemini-1.0-pro-latest')
    try:
        response = model.generate_content(prompt)
        return response.text
    except Exception as e:
        return f"[Gemini API Error: {e}]"

class GeminiResponse:
    def __init__(self, content):
        self.event = "assistant_response"
        self.content = content

class GeminiChat:
    assistant_message_role = "assistant"
    def __init__(self, id=None):
        self.id = id or 'gemini-pro'
    def response_stream(self, messages, **kwargs):
        if isinstance(messages, list):
            last = messages[-1]
            prompt = last.content if hasattr(last, 'content') else last.get('content', str(last))
        else:
            prompt = messages
        response_text = gemini_chat(prompt)
        yield GeminiResponse(response_text)
    def get_instructions_for_model(self, tools=None):
        # Return empty string or a default system prompt
        return ""
    def get_system_message_for_model(self, tools=None):
        # Return a default system message or empty string
        return ""

agent = Agent(
    model=GeminiChat(),
    tools=[ExaTools(start_published_date=today, type="keyword")],
    description=dedent("""\
        You are Professor X-1000, a distinguished AI research scientist with expertise
        in analyzing and synthesizing complex information. Your specialty lies in creating
        compelling, fact-based reports that combine academic rigor with engaging narrative.

        Your writing style is:
        - Clear and authoritative
        - Engaging but professional
        - Fact-focused with proper citations
        - Accessible to educated non-specialists\
    """),
    instructions=dedent("""\
        Begin by running 3 distinct searches to gather comprehensive information.
        Analyze and cross-reference sources for accuracy and relevance.
        Structure your report following academic standards but maintain readability.
        Include only verifiable facts with proper citations.
        Create an engaging narrative that guides the reader through complex topics.
        End with actionable takeaways and future implications.\
    """),
    expected_output=dedent("""\
    A professional research report in markdown format:

    # {Compelling Title That Captures the Topic's Essence}

    ## Executive Summary
    {Brief overview of key findings and significance}

    ## Introduction
    {Context and importance of the topic}
    {Current state of research/discussion}

    ## Key Findings
    {Major discoveries or developments}
    {Supporting evidence and analysis}

    ## Implications
    {Impact on field/society}
    {Future directions}

    ## Key Takeaways
    - {Bullet point 1}
    - {Bullet point 2}
    - {Bullet point 3}

    ## References
    - [Source 1](link) - Key finding/quote
    - [Source 2](link) - Key finding/quote
    - [Source 3](link) - Key finding/quote

    ---
    Report generated by Professor X-1000
    Advanced Research Systems Division
    Date: {current_date}\
    """),
    markdown=True,
    show_tool_calls=True,
    add_datetime_to_instructions=True,
)

# Example usage
if __name__ == "__main__":
    print("[DEBUG] Direct Gemini test...")
    print(gemini_chat("Research the latest developments in brain-computer interfaces"))
    print("[DEBUG] Starting agent...")
    responses = list(agent.run("Research the latest developments in brain-computer interfaces", stream=True))
    print(f"[DEBUG] Number of responses: {len(responses)}")
    for i, resp in enumerate(responses):
        print(f"[DEBUG] Response {i}: {type(resp)}")
        if hasattr(resp, 'content'):
            print(resp.content)
        elif isinstance(resp, str):
            print(resp)
        else:
            print(f"[DEBUG] Unknown response: {resp}")

# More example prompts to try:
"""
Try these research topics:
1. "Analyze the current state of solid-state batteries"
2. "Research recent breakthroughs in CRISPR gene editing"
3. "Investigate the development of autonomous vehicles"
4. "Explore advances in quantum machine learning"
5. "Study the impact of artificial intelligence on healthcare"
"""

# Required installation
# Run the following command to install the necessary package:
# pip install google-generativeai